"""
Demonstra√ß√£o da Regress√£o Log√≠stica para Predi√ß√£o de Readmiss√£o Hospitalar Diab√©tica

Este script executa apenas o modelo de Regress√£o Log√≠stica com dados pr√©-processados,
ideal para demonstra√ß√µes r√°pidas e testes do modelo.

Uso: python scripts/demo_logistic_regression.py
"""

import os
import sys
import time
import traceback

# Adicionar diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.logistic_regression_model import LogisticRegressionModel


def print_demo_header():
    """Imprime cabe√ßalho da demonstra√ß√£o"""
    print("ü§ñ" + "="*70 + "ü§ñ")
    print("    DEMONSTRA√á√ÉO: REGRESS√ÉO LOG√çSTICA")
    print("    Predi√ß√£o de Readmiss√£o Hospitalar Diab√©tica")
    print("    Modelo: Logistic Regression com class_weight='balanced'")
    print("ü§ñ" + "="*70 + "ü§ñ")


def print_demo_info():
    """Imprime informa√ß√µes sobre a demonstra√ß√£o"""
    print(f"\nüìã INFORMA√á√ïES DA DEMONSTRA√á√ÉO:")
    print(f"  üéØ Objetivo: Predizer readmiss√£o hospitalar em <30 dias")
    print(f"  üë• Pacientes: Diab√©ticos hospitalizados (1999-2008)")
    print(f"  üìä Dataset: UCI - Diabetes 130-US hospitals")
    print(f"  üîß Modelo: Regress√£o Log√≠stica balanceada")
    print(f"  üìà M√©tricas: Accuracy, Precision, Recall, F1, ROC-AUC")


def check_prerequisites():
    """Verifica se os pr√©-requisitos est√£o atendidos"""
    print(f"\nüîç Verificando pr√©-requisitos...")
    
    required_files = [
        'data/X_train.csv',
        'data/X_test.csv', 
        'data/y_train.csv',
        'data/y_test.csv'
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
        else:
            print(f"  ‚úÖ {file_path}")
    
    if missing_files:
        print(f"\n‚ùå Arquivos faltando: {missing_files}")
        print(f"üí° Execute primeiro: python main_pipeline.py")
        return False
    
    print(f"  ‚úÖ Todos os arquivos necess√°rios est√£o presentes!")
    return True


def print_results_summary(success, execution_time):
    """Imprime resumo dos resultados"""
    if success:
        print(f"\nüéâ" + "="*70 + "üéâ")
        print(f"    DEMONSTRA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print(f"    Tempo de execu√ß√£o: {execution_time:.2f} segundos")
        print(f"üéâ" + "="*70 + "üéâ")
        
        print(f"\nüìÅ ARQUIVOS GERADOS:")
        print(f"  üìä results/logistic_regression_results.png")
        print(f"  üîç results/logistic_regression_feature_importance.png")
        print(f"  üìã results/logistic_regression_report_*.txt")
        print(f"  üíæ models/logistic_regression_model_*.joblib")
        
        print(f"\nüè• INTERPRETA√á√ÉO CL√çNICA:")
        print(f"  ‚Ä¢ Accuracy ~65%: O modelo acerta 2 em cada 3 casos")
        print(f"  ‚Ä¢ Precision baixa: Muitos falsos positivos (alertas desnecess√°rios)")
        print(f"  ‚Ä¢ Recall moderado: Alguns casos de risco passam despercebidos")
        print(f"  ‚Ä¢ Uso recomendado: Ferramenta de triagem, n√£o diagn√≥stico final")
        
    else:
        print(f"\n‚ùå DEMONSTRA√á√ÉO FALHOU")
        print(f"   Verifique os logs de erro acima")


def main():
    """Demonstra√ß√£o da Regress√£o Log√≠stica"""
    
    print_demo_header()
    print_demo_info()
    
    # Verificar pr√©-requisitos
    if not check_prerequisites():
        sys.exit(1)
    
    print(f"\nüöÄ Iniciando execu√ß√£o do modelo...")
    start_time = time.time()
    
    try:
        # Criar e executar modelo
        lr_model = LogisticRegressionModel()
        success = lr_model.run_complete_pipeline()
        
        end_time = time.time()
        execution_time = end_time - start_time
        
        # Mostrar resultados
        print_results_summary(success, execution_time)
        
        if not success:
            sys.exit(1)
            
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è Demonstra√ß√£o interrompida pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro durante execu√ß√£o: {e}")
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
